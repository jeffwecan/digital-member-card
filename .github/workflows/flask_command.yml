name: Flask Command

on:
  workflow_call:
    inputs:
      command:
        description: "The justfile + flask-related recipe to run"
        required: true
        type: string
      flask_env:
        default: "development"
        description: "The environment specified for flask (used for settings, etc.)"
        required: true
        type: string
      management_sql_user_name:
        default: "tf-management"
        description: "SQL user name for database-related commands. Will be exported as the DIGITAL_MEMBERSHIP_DB_USERNAME env var"
        required: false
        type: string
    secrets:
      management_sql_user_password:
        required: false
    outputs:
      image:
        description: "GCR image produced by the command where applicable"
        value: ${{ jobs.run_flask_command.outputs.image }}

jobs:
  run_flask_command:
    name: Run Flask Command
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"
    outputs:
      image: ${{ steps.flask-command.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup just
        uses: extractions/setup-just@v1

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Utilize pip cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ hashFiles('requirements.txt') }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: "projects/567739286055/locations/global/workloadIdentityPools/los-verdes-digital-membership/providers/los-verdes-digital-membership"
          service_account: "github-deployer@lv-digital-membership.iam.gserviceaccount.com"
          access_token_scopes: "https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/sqlservice.admin"
          token_format: access_token
          access_token_lifetime: 1800s

      - name: Create Google application creds secret
        if: ${{ inputs.flask_env == 'remote-sql' }}
        id: google-app-creds
        run: |
          creds="$(cat '${{ env.GOOGLE_APPLICATION_CREDENTIALS }}')"
          echo "::add-mask::$creds"
          echo "::set-output name=creds::$creds"

      - name: Start Google Cloud SQL Proxy
        if: ${{ inputs.flask_env == 'remote-sql' }}
        uses: mattes/gce-cloudsql-proxy-action@v1
        with:
          creds: ${{ steps.google-app-creds.outputs.creds }}
          # TODO: load instance from TF outputs...
          instance: lv-digital-membership:us-central1:lv-digital-membership-6b6a7153

      - name: Run Flask Command
        id: flask-command
        run: just ${{ inputs.command }}
        env:
          DIGITAL_MEMBERSHIP_DB_USERNAME: ${{ inputs.flask_env }}
          DIGITAL_MEMBERSHIP_DB_ACCESS_TOKEN: ${{ secrets.management_sql_user_password }}
